<div style="direction: rtl;">
    <div class="input-container">
        <label class="date-input-container" for="datePicker">
            תאריך
            <input type="date" class="date-input" name="" id="datePicker">
        </label>

        <label class="city-input-container" for="cityPicker">
            כתובת
            <select class="city-input" name="" id="cityPicker">

            </select>
        </label>
    </div>

    <div id="showData">

    </div>
</div>


<script>
    var original = decodeURIComponent("{{{result}}}");
    var result = JSON.parse(original);
    var datePicker = document.getElementById('datePicker')
    var cityPicker = document.getElementById('cityPicker')

    // filters
    var currentDate = new Date()
    var currentCity = null

    datePicker.setAttribute('value', (new Date()).toJSON().slice(0, 10))
    datePicker.setAttribute('min', (new Date()).toJSON().slice(0, 10))

    datePicker.addEventListener('change', ({ target }) => {
        currentDate = new Date(target.value)
        currentCity = null
        buildTable(result, currentDate, null)
    })

    cityPicker.addEventListener('change', ({ target }) => {
        currentCity = target.value

        buildTable(result, currentDate, currentCity)
    })

    function buildTable(result, date, city) {
        var filteredResults = result.filter(({ DateDonation }) =>
            DateDonation && (new Date(DateDonation + '.000+00:00').toJSON().split('T')[0] === date.toJSON().split('T')[0]))

        var cities = Array.from(new Set(filteredResults.map(({ City }) => City)))

        if (city) {
            filteredResults = filteredResults.filter(({ City }) => City === city)
        }

        // resets the options from the select
        while (cityPicker.firstChild) {
            cityPicker.firstChild.remove();
        }

        cities.forEach((city, index) => {
            if (index === 0) {
                var defaultOption = document.createElement('option')
                defaultOption.value = ''
                defaultOption.textContent = 'הכל'

                if (currentCity === '') {
                    defaultOption.selected = true
                }

                cityPicker.appendChild(defaultOption)
            }

            var option = document.createElement('option')
            option.value = city
            option.textContent = city

            if (city === currentCity) {
                option.selected = true
            }

            cityPicker.appendChild(option)
        })

        var normalizedResults = filteredResults.map(({
            Street, City, NumHouse, Name, FromHour, ToHour, DateDonation }) => ({
                // later on if we need the date next to the row just uncomment
                // the line below
                // 'תאריך': new Date(DateDonation).toISOString().split('T')[0].slice(5).replace('-', '.').split('.').reverse().join('.'),
                'כתובת': `${Street} ${NumHouse ? NumHouse + ',' : ''} ${City}, ${Name}`,
                'שעת התחלה': FromHour,
                'שעת סיום': ToHour,
            }))

        var col = [];
        for (var i = 0; i < normalizedResults.length; i++) {
            for (var key in normalizedResults[i]) {
                if (col.indexOf(key) === -1) {
                    col.push(key);
                }
            }
        }

        // CREATE DYNAMIC TABLE.
        var table = document.createElement("table");
        table.classList.add('location-table')

        var tr = table.insertRow(-1);                   // TABLE ROW.

        for (var i = 0; i < col.length; i++) {
            var th = document.createElement("th");      // TABLE HEADER.
            th.innerHTML = col[i];
            th.classList.add('column-title')
            tr.appendChild(th);
        }

        // ADD JSON DATA TO THE TABLE AS ROWS.
        for (var i = 0; i < normalizedResults.length; i++) {

            tr = table.insertRow(-1);

            for (var j = 0; j < col.length; j++) {
                var tabCell = tr.insertCell(-1);
                tabCell.classList.add('spacing')
                tabCell.innerHTML = normalizedResults[i][col[j]];
            }
        }

        // FINALLY ADD THE NEWLY CREATED TABLE WITH JSON DATA TO A CONTAINER.
        var divContainer = document.getElementById("showData");
        divContainer.innerHTML = "";
        divContainer.appendChild(table);
    }

    buildTable(result, currentDate, currentCity)
</script>

<style>
    * {
        font-family: Arial, Helvetica, sans-serif;
    }

    .input-container {
        display: flex;
        align-items: center;
    }

    .city-input-container {
        margin-right: 20px;
        font-size: 25px;
        display: flex;
        flex-direction: column;
    }

    .city-input {
        font-size: 20px;
        padding: 3px;
    }

    .date-input-container {
        font-size: 25px;
        display: flex;
        flex-direction: column;
    }

    .date-input {
        font-size: 20px;
    }

    .location-table {
        margin-top: 20px;
        width: 100%;
        text-align: right;
    }

    .column-title {
        font-size: 20px;
        padding-bottom: 10px;
    }

    .spacing {
        padding: 0px 20px;
    }
</style>